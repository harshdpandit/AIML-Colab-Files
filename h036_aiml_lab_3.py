# -*- coding: utf-8 -*-
"""H036 AIML Lab 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11vI2oLapFTF0ziUbzoIqFnkyQKN2ocRD

Aim: Write a python/matlab program to generate the output of logical AND function using perceptron.
"""

#Harsh Pandit H036
import pandas as pd
x1=[]
x2=[]
w1=[]
w2=[]
biases=[]
#initializing the weights and biases
weight1=0
weight2=0
bias=0
theta=0
alpha=1
epoch= int(input('Enter the number of epochs: '))
for i in range (0,epoch,1):
  #function to calculate the net input
  def calculate_net_input(input_value,weight1,weight2,bias):
    yin=input_value[0]*weight1+input_value[1]*weight2+bias
    return yin
  def activation_function(theta,yin):
  #defining the activation function
    if yin>theta:
      yout=1
    elif yin<theta:
      yout=-1
    elif yin==0:
      yout=0
    return yout

  def update_weights_and_bias(weight1,weight2,bias,y,alpha,target,input_value):
    #function to update the weights and biases
    multiplication_factor=alpha*target
    weight1=weight1+multiplication_factor*input_value[0]
    weight2=weight2+multiplication_factor*input_value[1]
    bias=bias+multiplication_factor
    return weight1,weight2,bias

  def get_target_value(input_value):
    if input_value[0]==input_value[1]==1:
      return 1
    else:
      return -1
  #defining the values to be given as input
  input_values=[[1,1],[-1,1],[1,-1],[-1,-1]]
  for input_value in input_values:
    target_value=get_target_value(input_value)
    yin=calculate_net_input(input_value,weight1,weight2,bias)
    y=activation_function(theta,yin)
    if y != target_value:
      weight1,weight2,bias=update_weights_and_bias(weight1,weight2,bias,y,alpha,target_value,input_value)
    else:
      pass
    x1.append(input_value[0])
    x2.append(input_value[1])
    w1.append(weight1)
    w2.append(weight2)
    biases.append(bias)
df=pd.DataFrame()
df['X1']=x1
df['X2']=x2
df['Bias']=biases
df['Weight 1']=w1
df['Weight 2']=w2
df=pd.DataFrame([[' ',' ',0,0,0]],columns=df.columns).append(df)
df=df.style.hide_index()
df